function cov_d7lcsbjvt(){var path="C:\\Users\\DELL\\Desktop\\CropDeal Case Study\\CropDeal\\Users Service\\api\\routes\\userRoutes.js";var hash="5d0e1ee932e8c95a90c445897c4207b326c0045e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\DELL\\Desktop\\CropDeal Case Study\\CropDeal\\Users Service\\api\\routes\\userRoutes.js",statementMap:{"0":{start:{line:1,column:14},end:{line:1,column:32}},"1":{start:{line:2,column:13},end:{line:2,column:29}},"2":{start:{line:3,column:21},end:{line:3,column:61}},"3":{start:{line:6,column:0},end:{line:6,column:53}},"4":{start:{line:49,column:0},end:{line:49,column:51}},"5":{start:{line:52,column:0},end:{line:52,column:53}},"6":{start:{line:55,column:0},end:{line:55,column:51}},"7":{start:{line:82,column:0},end:{line:82,column:53}},"8":{start:{line:108,column:0},end:{line:108,column:53}},"9":{start:{line:152,column:0},end:{line:152,column:47}},"10":{start:{line:178,column:0},end:{line:178,column:61}},"11":{start:{line:182,column:0},end:{line:182,column:47}},"12":{start:{line:208,column:0},end:{line:208,column:61}},"13":{start:{line:233,column:0},end:{line:233,column:76}},"14":{start:{line:259,column:0},end:{line:259,column:76}},"15":{start:{line:306,column:0},end:{line:306,column:81}},"16":{start:{line:309,column:0},end:{line:309,column:95}},"17":{start:{line:343,column:0},end:{line:343,column:87}},"18":{start:{line:345,column:0},end:{line:345,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5d0e1ee932e8c95a90c445897c4207b326c0045e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_d7lcsbjvt=function(){return actualCoverage;};}return actualCoverage;}cov_d7lcsbjvt();var express=(cov_d7lcsbjvt().s[0]++,require('express'));var router=(cov_d7lcsbjvt().s[1]++,express.Router());var userController=(cov_d7lcsbjvt().s[2]++,require('../controllers/userController'));//register user by adding  to db
cov_d7lcsbjvt().s[3]++;router.post('/register',userController.registerUser);//view user profile
/**
 * 
 * components:
 *  securitySchemes:
 *      bearerAuth:
 *          type: http
 *          scheme: bearer
 *          bearerFormat: JWT
 * security:
 *  - bearerAuth: []
 * /
/**
 * @swagger
 * paths:
 *  /user/{id}:
 *      get:
 *          summary: Use to get user profile by user id
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: id
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the user to get profile
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[4]++;router.get('/user/:id',userController.viewProfile);//update user
cov_d7lcsbjvt().s[5]++;router.put('/user/:id',userController.updateProfile);//delete user
cov_d7lcsbjvt().s[6]++;router.post('/user/:id',userController.deleteUser);//get Farmers List
/**
 * @swagger
 * paths:
 *  /farmers:
 *      get:
 *          summary: Use to get list of farmers in the applications
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: Successfull response
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[7]++;router.get('/farmers',userController.getFarmersList);//get Dealers List
/**
 * @swagger
 * paths:
 *  /dealers:
 *      get:
 *          summary: Use to get list of dealers in the applications
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: Successfull response
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[8]++;router.get('/dealers',userController.getDealersList);//rate Farmer by dealer or dealer by farmer
/**
 * @swagger
 * paths:
 *  /rating:
 *      post:
 *          summary: Use to give rating to dealers by farmers and by dealers to farmers 
 *          security:
 *              - bearerAuth: []
 *          consumes:
 *            - application/json
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: body
 *              name: user
 *              description: Rating details
 *              schema:
 *                  type: object
 *                  properties:
 *                      farmerEmail:
 *                          type: string
 *                      dealerEmail:
 *                          type: string
 *                      rating:
 *                          type: number
 *                  example:
 *                      farmerEmail: tom@gmail.com
 *                      dealerEmail: sam@gmail.com
 *                      rating: 4
 *          responses:
 *              '200':
 *                  description: success in posting rating data
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[9]++;router.post('/rating',userController.rateUser);//send all ratings given by dealer to admin
/**
 * @swagger
 * paths:
 *  /farmerRating:
 *      get:
 *          summary: Use to get ratings given by dealer to farmer
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: Successfull response
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[10]++;router.get('/farmerRating',userController.viewFarmerRatings);//send all ratings given by farmer to admin
cov_d7lcsbjvt().s[11]++;router.post('/rating',userController.rateUser);//send all ratings given by dealer to admin
/**
 * @swagger
 * paths:
 *  /dealerRating:
 *      get:
 *          summary: Use to get ratings given by farmer to dealer
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: Successfull response
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[12]++;router.get('/dealerRating',userController.viewDealerRatings);//send farmer name and contact while publishing crops to crops management service
/**
 * @swagger
 * paths:
 *  /farmerNameAndContact:
 *      get:
 *          summary: Use to get farmer name and contact during publishing of crop
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: Successfull response
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[13]++;router.get('/farmerNameAndContact',userController.sendFarmerContactAndName);//send dealer name and contact while publishing crops to crops management service
/**
 * @swagger
 * paths:
 *  /dealerNameAndContact:
 *      get:
 *          summary: Use to get dealer name and contact while purchasing of crop
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: Successfull response
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[14]++;router.get('/dealerNameAndContact',userController.sendDealerContactAndName);//add subscribed crops to subscribed crops array
/**
 * @swagger
 * paths:
 *  /dealer/subscribeCrops/{dealerId}:
 *      put:
 *          summary: Use to subscribe to particular crop
 *          security:
 *              - bearerAuth: []
 *          consumes:
 *            - application/json
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: dealerId
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the dealer to subscribe crop
 *            - in: body
 *              name: user
 *              description: Subcribe crop details
 *              schema:
 *                  type: object
 *                  properties:
 *                      cropType:
 *                          type: string
 *                      cropName:
 *                          type: string
 *                  example:
 *                      cropType: fruit
 *                      cropName: mango
 *          responses:
 *              '200':
 *                  description: success in posting subscription data
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[15]++;router.put('/dealer/subscribeCrops/:dealerId',userController.addSubscribedCrops);//delete subscribed crop from subscribed crops array on request of dealer
cov_d7lcsbjvt().s[16]++;router.delete('/dealer/subscribedCrops/:subscribedCropId',userController.deleteSubscribedCrop);//send subscribed crops list on request of dealer
/**
 * @swagger
 * paths:
 *  /dealer/subscribedCrops/{dealerId}:
 *      get:
 *          summary: Use to get subscribed crops list of a particular dealer
 *          security:
 *              - bearerAuth: []
 *          consumes:
 *            - application/json
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: dealerId
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the dealer to get subscribe crop list
 *          responses:
 *              '200':
 *                  description: success in getting subscribed crops list
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_d7lcsbjvt().s[17]++;router.get('/dealer/subscribedCrops/:dealerId',userController.sendSubscribedCropsList);cov_d7lcsbjvt().s[18]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,