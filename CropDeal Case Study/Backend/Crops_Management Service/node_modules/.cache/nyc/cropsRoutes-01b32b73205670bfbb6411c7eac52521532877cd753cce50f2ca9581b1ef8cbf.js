function cov_1atra1lncn(){var path="C:\\Users\\DELL\\Desktop\\CropDeal Case Study\\CropDeal\\Crops_Management Service\\api\\routes\\cropsRoutes.js";var hash="c48fde531f18bcb68ba7b1bca6c236791904a04e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\DELL\\Desktop\\CropDeal Case Study\\CropDeal\\Crops_Management Service\\api\\routes\\cropsRoutes.js",statementMap:{"0":{start:{line:1,column:14},end:{line:1,column:32}},"1":{start:{line:2,column:13},end:{line:2,column:29}},"2":{start:{line:3,column:22},end:{line:3,column:63}},"3":{start:{line:6,column:0},end:{line:6,column:56}},"4":{start:{line:9,column:0},end:{line:9,column:67}},"5":{start:{line:52,column:0},end:{line:52,column:72}},"6":{start:{line:78,column:0},end:{line:78,column:65}},"7":{start:{line:104,column:0},end:{line:104,column:71}},"8":{start:{line:137,column:0},end:{line:137,column:78}},"9":{start:{line:169,column:0},end:{line:169,column:94}},"10":{start:{line:200,column:0},end:{line:200,column:105}},"11":{start:{line:252,column:0},end:{line:252,column:74}},"12":{start:{line:284,column:0},end:{line:284,column:78}},"13":{start:{line:310,column:0},end:{line:310,column:71}},"14":{start:{line:342,column:0},end:{line:342,column:68}},"15":{start:{line:374,column:0},end:{line:374,column:65}},"16":{start:{line:376,column:0},end:{line:376,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c48fde531f18bcb68ba7b1bca6c236791904a04e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1atra1lncn=function(){return actualCoverage;};}return actualCoverage;}cov_1atra1lncn();var express=(cov_1atra1lncn().s[0]++,require('express'));var router=(cov_1atra1lncn().s[1]++,express.Router());var cropsController=(cov_1atra1lncn().s[2]++,require('../controllers/cropsController'));//publish crop by adding  to db
cov_1atra1lncn().s[3]++;router.post('/publishCrop',cropsController.publishCrop);//update published crop 
cov_1atra1lncn().s[4]++;router.put('/publishCrop/:id',cropsController.updatePublishedCrop);//delete published crop 
/**
 * 
 * components:
 *  securitySchemes:
 *      bearerAuth:
 *          type: http
 *          scheme: bearer
 *          bearerFormat: JWT
 * security:
 *  - bearerAuth: []
 * /
/**
 * @swagger
 * paths:
 *  /publishedCrop/{id}:
 *      delete:
 *          summary: Use to delete published crop of a farmer
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: id
 *              schema:
 *                  type: string
 *              required: true
 *              description: published crop id which is to be deleted
 *          responses:
 *              '200':
 *                  description: successful deletion of crop
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[5]++;router.delete('/publishedCrop/:id',cropsController.deletePublishedCrop);//Send (all)crops published by farmers to dealers which are still published and not soldout
/**
 * @swagger
 * paths:
 *  /publishedCrop/:
 *      get:
 *          summary: Use to get all published crops which are not sold out
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: success in getting data
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[6]++;router.get('/publishedCrop/',cropsController.sendPublishedCrops);//Send (all)crops published by all farmers to admin
/**
 * @swagger
 * paths:
 *  /allPublishedCrop/:
 *      get:
 *          summary: Use to get all published crops by all farmers
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: successin getting data
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[7]++;router.get('/allPublishedCrop/',cropsController.sendAllPublishedCrops);//send published crop to farmer filter by published ID which is not sold out.
/**
 * @swagger
 * paths:
 *  /publishedCrop/inStock/{id}:
 *      get:
 *          summary: Use to get a published crop of a farmer by a particular published id
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: id
 *              schema:
 *                  type: string
 *              required: true
 *              description: published crop id
 *          responses:
 *              '200':
 *                  description: success in getting of crop data
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[8]++;router.get('/publishedCrop/inStock/:id',cropsController.getPublishedCropById);//send all published crops to farmer filter by farmer email id which are not sold out.
/**
 * @swagger
 * paths:
 *  /publishedCrops/inStock/{farmerId}:
 *      get:
 *          summary: Use to get all published crops of a particular farmer
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: farmerId
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the farmer to get published crops
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[9]++;router.get('/publishedCrops/inStock/:farmerId',cropsController.getAllPublishedCropByFarmerId);//send published crops which are subscribed by particular dealer
/**
 * @swagger
 * paths:
 *  /publishedCrops/subscribed/{dealerId}:
 *      get:
 *          summary: Use to get only those published crops which are subscribed by a dealer
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: dealerId
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the dealer to those published crops which are subscribed
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[10]++;router.get('/publishedCrops/subscribed/:dealerId',cropsController.getPublishedCropsSubscribedByDealerId);//add purchase details of a published crop in purchasedCrop collection
/**
 * @swagger
 * paths:
 *  /purchaseCrop/{publishedCropId}:
 *      post:
 *          summary: Use to purchase a particular crop
 *          security:
 *              - bearerAuth: []
 *          consumes:
 *            - application/json
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: publishedCropId
 *              schema:
 *                  type: string
 *              required: true
 *              description: published crop id which is to be purchased
 *            - in: body
 *              name: crop details
 *              description: purchase crop details
 *              schema:
 *                  type: object
 *                  properties:
 *                      quantityPurchased:
 *                          type: string
 *                      pricePerKg:
 *                          type: number
 *                      totalPrice:
 *                          type: number
 *                      purchaseMethod:
 *                          type: string
 *                  example:
 *                      quantityPurchased: 50
 *                      pricePerKg: 20
 *                      totalPrice: 1000
 *                      purchaseMethod: Razorpay
 *          responses:
 *              '200':
 *                  description: success in purchasing crop
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[11]++;router.post('/purchaseCrop/:publishedCropId',cropsController.purchaseCrop);//send purchased crops list of a particular dealer
/**
 * @swagger
 * paths:
 *  /purchasedCrops/{dealerId}:
 *      get:
 *          summary: Use to get purchased crops of a dealer
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: dealerId
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the dealer whose purchased crops list is required
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[12]++;router.get('/purchasedCrops/:dealerId',cropsController.getPurchasedCropsList);//send purchased crops of all dealers to admin
/**
 * @swagger
 * paths:
 *  /purchasedCrops:
 *      get:
 *          summary: Use to get all purchased crops by all the dealers
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[13]++;router.get('/purchasedCrops',cropsController.getAllPurchasedCropsList);//send sold crops list of a particular farmer
/**
 * @swagger
 * paths:
 *  /soldCrops/{farmerId}:
 *      get:
 *          summary: Use to get sold crops of a farmer 
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: farmerId
 *              schema:
 *                  type: string
 *              required: true
 *              description: email id of the farmer whose solds crops list is required
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[14]++;router.get('/soldCrops/:farmerId',cropsController.getSoldCropsList);//send receipt of sold/purchased crops by farmer/dealer
/**
 * @swagger
 * paths:
 *  /receipt/{transactionId}:
 *      get:
 *          summary: Use to get receipt of a sold/purchased crop
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *            - in: path
 *              name: transactionId
 *              schema:
 *                  type: string
 *              required: true
 *              description: transaction id is required
 *          responses:
 *              '200':
 *                  description: success in getting receipt
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_1atra1lncn().s[15]++;router.get('/receipt/:transactionId',cropsController.getReceipt);cov_1atra1lncn().s[16]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,