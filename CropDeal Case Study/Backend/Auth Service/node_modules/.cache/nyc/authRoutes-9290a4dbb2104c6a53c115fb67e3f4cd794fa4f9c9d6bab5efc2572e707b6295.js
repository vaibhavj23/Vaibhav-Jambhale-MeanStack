function cov_25utaplv7(){var path="C:\\Users\\DELL\\Desktop\\CropDeal Case Study\\CropDeal\\Auth Service\\api\\routes\\authRoutes.js";var hash="95fe81f94f14d3a5a76678141d54df4d9076ad56";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\DELL\\Desktop\\CropDeal Case Study\\CropDeal\\Auth Service\\api\\routes\\authRoutes.js",statementMap:{"0":{start:{line:1,column:14},end:{line:1,column:32}},"1":{start:{line:2,column:13},end:{line:2,column:29}},"2":{start:{line:3,column:18},end:{line:3,column:58}},"3":{start:{line:6,column:0},end:{line:6,column:50}},"4":{start:{line:35,column:0},end:{line:35,column:44}},"5":{start:{line:38,column:0},end:{line:38,column:80}},"6":{start:{line:73,column:0},end:{line:73,column:81}},"7":{start:{line:85,column:0},end:{line:85,column:52}},"8":{start:{line:88,column:0},end:{line:88,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"95fe81f94f14d3a5a76678141d54df4d9076ad56"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_25utaplv7=function(){return actualCoverage;};}return actualCoverage;}cov_25utaplv7();var express=(cov_25utaplv7().s[0]++,require('express'));var router=(cov_25utaplv7().s[1]++,express.Router());var authService=(cov_25utaplv7().s[2]++,require('../controllers/authController'));//register user by adding credentials to db
cov_25utaplv7().s[3]++;router.post('/register',authService.registerUser);//check user is present in databse and send token
/**
 * @swagger
 * paths:
 *  /login:
 *      post:
 *          summary: Use to login in system and get authorization token
 *          consumes:
 *            - application/json
 *          parameters:
 *            - in: body
 *              name: user
 *              description: User details for login
 *              schema:
 *                  type: object
 *                  properties:
 *                      email:
 *                          type: string
 *                      password:
 *                          type: string
 *                  example:
 *                      email: tom@gmail.com
 *                      password: "1234"
 *          responses:
 *              '200':
 *                  description: ok
 */cov_25utaplv7().s[4]++;router.post('/login',authService.loginUser);//delete user based on id on request of admin
cov_25utaplv7().s[5]++;router.delete('/user/:id',authService.authenticateToken,authService.deleteUser);//authorize user
/**
 * 
 * components:
 *  securitySchemes:
 *      bearerAuth:
 *          type: http
 *          scheme: bearer
 *          bearerFormat: JWT
 * security:
 *  - bearerAuth: []
 * @swagger
 * paths:
 *  /authorize:
 *      get:
 *          summary: Use to authorize the users
 *          security:
 *              - bearerAuth: []
 *          parameters:
 *            - in: header
 *              name: Authorization
 *              description: an authorization header
 *              type: string
 *          responses:
 *              '200':
 *                  description: ok
 *              '401':
 *                  description: token not present
 *              '403':
 *                  description: token is invalid
 */cov_25utaplv7().s[6]++;router.get('/authorize',authService.authenticateToken,authService.authorizeUser);//get users email id for validation
/**
 * @swagger
 * /usersEmail:
 *  get:
 *    description: Use to request all users emails in database
 *    responses:
 *      '200':
 *        description: A successful response
 */cov_25utaplv7().s[7]++;router.get('/usersEmail',authService.getUsersEmail);cov_25utaplv7().s[8]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhSb3V0ZXMuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJhdXRoU2VydmljZSIsInBvc3QiLCJyZWdpc3RlclVzZXIiLCJsb2dpblVzZXIiLCJkZWxldGUiLCJhdXRoZW50aWNhdGVUb2tlbiIsImRlbGV0ZVVzZXIiLCJnZXQiLCJhdXRob3JpemVVc2VyIiwiZ2V0VXNlcnNFbWFpbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiIrc0NBZVk7eUZBZlosR0FBSUEsQ0FBQUEsT0FBTyx5QkFBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBVixDQUFYLENBQ0EsR0FBSUMsQ0FBQUEsTUFBTSx5QkFBR0YsT0FBTyxDQUFDRyxNQUFSLEVBQUgsQ0FBVixDQUNBLEdBQUlDLENBQUFBLFdBQVcseUJBQUdILE9BQU8sQ0FBQywrQkFBRCxDQUFWLENBQWYsQ0FFQTt1QkFDQUMsTUFBTSxDQUFDRyxJQUFQLENBQVksV0FBWixDQUF3QkQsV0FBVyxDQUFDRSxZQUFwQyxFQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHLHVCQUNBSixNQUFNLENBQUNHLElBQVAsQ0FBWSxRQUFaLENBQXFCRCxXQUFXLENBQUNHLFNBQWpDLEVBRUE7dUJBQ0FMLE1BQU0sQ0FBQ00sTUFBUCxDQUFjLFdBQWQsQ0FBMEJKLFdBQVcsQ0FBQ0ssaUJBQXRDLENBQXdETCxXQUFXLENBQUNNLFVBQXBFLEVBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx1QkFDQVIsTUFBTSxDQUFDUyxHQUFQLENBQVcsWUFBWCxDQUF3QlAsV0FBVyxDQUFDSyxpQkFBcEMsQ0FBc0RMLFdBQVcsQ0FBQ1EsYUFBbEUsRUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHLHVCQUNBVixNQUFNLENBQUNTLEdBQVAsQ0FBVyxhQUFYLENBQXlCUCxXQUFXLENBQUNTLGFBQXJDLEUsdUJBR0FDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQmIsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxyXG52YXIgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKVxyXG52YXIgYXV0aFNlcnZpY2UgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9hdXRoQ29udHJvbGxlcicpO1xyXG5cclxuLy9yZWdpc3RlciB1c2VyIGJ5IGFkZGluZyBjcmVkZW50aWFscyB0byBkYlxyXG5yb3V0ZXIucG9zdCgnL3JlZ2lzdGVyJyxhdXRoU2VydmljZS5yZWdpc3RlclVzZXIpO1xyXG5cclxuLy9jaGVjayB1c2VyIGlzIHByZXNlbnQgaW4gZGF0YWJzZSBhbmQgc2VuZCB0b2tlblxyXG4vKipcclxuICogQHN3YWdnZXJcclxuICogcGF0aHM6XHJcbiAqICAvbG9naW46XHJcbiAqICAgICAgcG9zdDpcclxuICogICAgICAgICAgc3VtbWFyeTogVXNlIHRvIGxvZ2luIGluIHN5c3RlbSBhbmQgZ2V0IGF1dGhvcml6YXRpb24gdG9rZW5cclxuICogICAgICAgICAgY29uc3VtZXM6XHJcbiAqICAgICAgICAgICAgLSBhcHBsaWNhdGlvbi9qc29uXHJcbiAqICAgICAgICAgIHBhcmFtZXRlcnM6XHJcbiAqICAgICAgICAgICAgLSBpbjogYm9keVxyXG4gKiAgICAgICAgICAgICAgbmFtZTogdXNlclxyXG4gKiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFVzZXIgZGV0YWlscyBmb3IgbG9naW5cclxuICogICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICBlbWFpbDpcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDpcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgIGV4YW1wbGU6XHJcbiAqICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB0b21AZ21haWwuY29tXHJcbiAqICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBcIjEyMzRcIlxyXG4gKiAgICAgICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgICAgICAgICAnMjAwJzpcclxuICogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2tcclxuICovXHJcbnJvdXRlci5wb3N0KCcvbG9naW4nLGF1dGhTZXJ2aWNlLmxvZ2luVXNlcik7XHJcblxyXG4vL2RlbGV0ZSB1c2VyIGJhc2VkIG9uIGlkIG9uIHJlcXVlc3Qgb2YgYWRtaW5cclxucm91dGVyLmRlbGV0ZSgnL3VzZXIvOmlkJyxhdXRoU2VydmljZS5hdXRoZW50aWNhdGVUb2tlbixhdXRoU2VydmljZS5kZWxldGVVc2VyKTtcclxuXHJcblxyXG4vL2F1dGhvcml6ZSB1c2VyXHJcblxyXG4vKipcclxuICogXHJcbiAqIGNvbXBvbmVudHM6XHJcbiAqICBzZWN1cml0eVNjaGVtZXM6XHJcbiAqICAgICAgYmVhcmVyQXV0aDpcclxuICogICAgICAgICAgdHlwZTogaHR0cFxyXG4gKiAgICAgICAgICBzY2hlbWU6IGJlYXJlclxyXG4gKiAgICAgICAgICBiZWFyZXJGb3JtYXQ6IEpXVFxyXG4gKiBzZWN1cml0eTpcclxuICogIC0gYmVhcmVyQXV0aDogW11cclxuICogQHN3YWdnZXJcclxuICogcGF0aHM6XHJcbiAqICAvYXV0aG9yaXplOlxyXG4gKiAgICAgIGdldDpcclxuICogICAgICAgICAgc3VtbWFyeTogVXNlIHRvIGF1dGhvcml6ZSB0aGUgdXNlcnNcclxuICogICAgICAgICAgc2VjdXJpdHk6XHJcbiAqICAgICAgICAgICAgICAtIGJlYXJlckF1dGg6IFtdXHJcbiAqICAgICAgICAgIHBhcmFtZXRlcnM6XHJcbiAqICAgICAgICAgICAgLSBpbjogaGVhZGVyXHJcbiAqICAgICAgICAgICAgICBuYW1lOiBBdXRob3JpemF0aW9uXHJcbiAqICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYW4gYXV0aG9yaXphdGlvbiBoZWFkZXJcclxuICogICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgICAgICAgICAnMjAwJzpcclxuICogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2tcclxuICogICAgICAgICAgICAgICc0MDEnOlxyXG4gKiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0b2tlbiBub3QgcHJlc2VudFxyXG4gKiAgICAgICAgICAgICAgJzQwMyc6XHJcbiAqICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRva2VuIGlzIGludmFsaWRcclxuICovXHJcbnJvdXRlci5nZXQoJy9hdXRob3JpemUnLGF1dGhTZXJ2aWNlLmF1dGhlbnRpY2F0ZVRva2VuLGF1dGhTZXJ2aWNlLmF1dGhvcml6ZVVzZXIpO1xyXG5cclxuLy9nZXQgdXNlcnMgZW1haWwgaWQgZm9yIHZhbGlkYXRpb25cclxuLyoqXHJcbiAqIEBzd2FnZ2VyXHJcbiAqIC91c2Vyc0VtYWlsOlxyXG4gKiAgZ2V0OlxyXG4gKiAgICBkZXNjcmlwdGlvbjogVXNlIHRvIHJlcXVlc3QgYWxsIHVzZXJzIGVtYWlscyBpbiBkYXRhYmFzZVxyXG4gKiAgICByZXNwb25zZXM6XHJcbiAqICAgICAgJzIwMCc6XHJcbiAqICAgICAgICBkZXNjcmlwdGlvbjogQSBzdWNjZXNzZnVsIHJlc3BvbnNlXHJcbiAqL1xyXG5yb3V0ZXIuZ2V0KCcvdXNlcnNFbWFpbCcsYXV0aFNlcnZpY2UuZ2V0VXNlcnNFbWFpbCk7XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7Il19